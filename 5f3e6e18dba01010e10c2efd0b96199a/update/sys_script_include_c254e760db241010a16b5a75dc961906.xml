<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>sn_gcp_cds_spoke.GoogleCloudDatastoreUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GoogleCloudDatastoreUtils</name>
        <script><![CDATA[var GoogleCloudDatastoreUtils = Class.create();
GoogleCloudDatastoreUtils.prototype = {
    initialize: function() {},

    validateInputVariables: function(inputs, outputs) {
        for (var key in inputs) {
            var value = inputs[key];
            if (typeof value == 'string')
                inputs[key] = value.trim();
            else
                inputs[key] = value;
        }
        return inputs;
    },

    validateMandatoryVariables: function(obj, keys) {
        keys.forEach(function(key) {
            if (!obj[key])
                throw new Error("Error while executing, mandatory information isn't passed in " + key);
        });
    },

    maptoOutputFromInput: function(inputs, outputs, keys) {
        if (keys.length <= 0)
            for (var key in inputs) {
                outputs[key] = inputs[key];
            } else {
                keys.forEach(function(key) {
                    outputs[key] = inputs[key];
                });
            }
        return outputs;
    },

    entityExport: function(inputs, outputs, type) {
        var payload = {
            "entityFilter": {
                "kinds": [],
                "namespaceIds": []
            },
            "labels": {

            },
        };
        if (inputs.entityfilter.kinds.length > 0) {
            inputs.entityfilter.kinds.forEach(function(kind) {
                var kinds = [];
                if (kind.trim()) {
                    kinds.push(kind.trim());
                }
                if (kinds.length > 0)
                    payload.entityFilter.kinds = kinds;
            });
        }
        if (inputs.entityfilter.namespaceIds.length > 0) {
            inputs.entityfilter.namespaceIds.forEach(function(namespaceId) {
                var namespaceIds = [];
                if (namespaceId.trim()) {
                    namespaceIds.push(namespaceId.trim());
                }
                if (namespaceIds.length > 0)
                    payload.entityFilter.namespaceIds = namespaceIds;
            });
        }
        if (inputs.labels.length > 0) {
            var labels = {

            };
            var isLabel = false;
            inputs.labels.forEach(function(label) {
                var key = label["key"].trim();
                var value = label["value"].trim();
                if (key && value) {
                    isLabel = true;
                    labels[key] = value;
                }
            });
            if (isLabel) {
                payload.labels = labels;
            }
        }
        if (type == "Export") {
            payload.outputUrlPrefix = "gs://" + inputs.bucketname;
        } else {
            payload.inputUrl = "gs://" + inputs.filepath;
        }
        outputs.payload = JSON.stringify(payload);
        return outputs;

    },

    createIndex: function(inputs, outputs) {
        var payload = {
            "kind": inputs.kind.toLowerCase(),
            "ancestor": "ALL_ANCESTORS"
        };
        if (inputs.properties.length > 0) {
            var properties = [];
            inputs.properties.forEach(function(property) {
                if (property['name'].trim() && property['direction']) {
                    var propObject = {};
                    propObject.name = property['name'].toLowerCase();
                    propObject.direction = property['direction'];
                    properties.push(propObject);
                }
                if (properties.length < 0)
                    throw new Error("Atleast one property required");
                payload.properties = properties;
            });
            payload.properties = properties;
        }
        outputs.payload = JSON.stringify(payload);
        return outputs;
    },

    type: 'GoogleCloudDatastoreUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-04-30 09:37:18</sys_created_on>
        <sys_id>c254e760db241010a16b5a75dc961906</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>GoogleCloudDatastoreUtils</sys_name>
        <sys_package display_value="Google Cloud Datastore Spoke" source="sn_gcp_cds_spoke">5f3e6e18dba01010e10c2efd0b96199a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Google Cloud Datastore Spoke">5f3e6e18dba01010e10c2efd0b96199a</sys_scope>
        <sys_update_name>sys_script_include_c254e760db241010a16b5a75dc961906</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-05-04 11:47:51</sys_updated_on>
    </sys_script_include>
</record_update>
